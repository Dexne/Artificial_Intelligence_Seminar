# -*- coding: utf-8 -*-
"""Técnicas_de_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tmK6b6sFrZrjIiPB8biamu5t5cnosfH1

Técnicas de clustering

Cuantizar imagen con K-means
"""

# importamos librerias y modulos
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.cluster import KMeans
from sklearn.utils import shuffle

"""Leemos la imagen"""

# leemos imagen y normalizamos
img = mpimg.imread('/content/frutas.jpg')
img = np.array(img, dtype=np.float64) / 255

# obtenemos el tamaño y definimos el número de clases
w, h, d = img.shape
n_classes = 8

# Redimensionamos
img_array = np.reshape(img, (w * h, d))

image_array_sample = shuffle(img_array, random_state=0)[:1000]
kmeans = KMeans(n_clusters = n_classes)
kmeans.fit(image_array_sample)
labels = kmeans.predict(img_array)
print(labels)

# vemos a que cluster pertenece y cambiamos por el pixel del centro
img_labels = np.reshape(labels, (w,h))
img_out = np.zeros((w,h,d))
label_idx = 0
for i in range(w):
  for j in range(h):
    img_out[i][j][0] = kmeans.cluster_centers_[img_labels[i][j]][0]
    img_out[i][j][1] = kmeans.cluster_centers_[img_labels[i][j]][1]
    img_out[i][j][2] = kmeans.cluster_centers_[img_labels[i][j]][2]

print(kmeans.cluster_centers_)

"""Representacion de los colores"""

plt.imshow(img)

"""Visualizamos la imagen original"""

# imagen de salida, imagen cuantizada
plt.title('Quantized image with K-Means')
plt.imshow(img_out)