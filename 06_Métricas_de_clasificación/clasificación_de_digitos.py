# -*- coding: utf-8 -*-
"""Clasificación_de_digitos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XqQ0ShhwOIOhLxjCj0YxUi7Y-i2XHJ2h
"""

# Métricas para clasificación
# Clasificación de digitos
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split

"""Leer datos:"""

digits = datasets.load_digits()
target, images = digits['target'], digits['images']
images.shape

"""Calcular cuántos hay"""

n_samples = digits['target'].shape[0]

"""Mostrar una imagen de manera aleatoria"""

sample = np.random.randint(n_samples)
plt.imshow(images[sample])
plt.title('Target: %i' % target[sample])

# Aplanar las imagenes
x = images.reshape((n_samples,-1))
x.shape

# separar conjuntos de entrenamiento y prueba
xtrain, xtest, ytrain, ytest = train_test_split(x, target)

#Instanciar modelo
model = svm.SVC(gamma=0.0001)

# Entrenar modelo
model.fit(xtrain, ytrain)

# Aplicar metrica al modelo
print('Train: ', model.score(xtrain, ytrain))
print('Test: ', model.score(xtest, ytest))

# Hacer predicciones del test
ypred = model.predict(xtest)

# Reporte de clasificación
print('Classification report: \n', metrics.classification_report(ytest, ypred))

# Matrix de confusión
print('Confusion matrix: \n', metrics.confusion_matrix(ytest, ypred))

"""La matriz de confusión nos ayuda a ver en qué nos estamos equivocando"""

# Dibujar una predicciíon aleatoria
sample = np.random.randint(xtest.shape[0])
plt.imshow(xtest[sample].reshape((8,8)))
plt.title('Prediction: %i' % ypred[sample])

